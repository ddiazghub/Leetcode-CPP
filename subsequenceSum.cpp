#include <vector>
#include <algorithm>
#include <iostream>

const int MOD = 1e9 + 7;

/**
 * Generate all the powers of 2 mod n up to given power.
 */
std::vector<int> pows2ModN(int mod, int size) {
    std::vector<int> pows2(size);
    pows2[0] = 1;

    for (int i = 1; i < size; i++) {
        pows2[i] = (pows2[i - 1] << 1) % mod;
        pows2[i - 1]--;
    }

    pows2[size - 1]--;

    return pows2;
}

/**
 * Number of subsequences in array that add up to target.
 */
int numSubseq(std::vector<int> &nums, int target) {
    int n = nums.size();
    std::sort(nums.begin(), nums.end());
    std::vector<int> pows2 = pows2ModN(MOD, n + 1);
    int end = n - 1;

    if (end == 0)
        return 2 * nums[end] <= target ? 1 : 0;

    int start = 0;
    int count = 0;

    while (start < end) {
        // Find last value that causes all subsequences in the range to meet the target.
        while (nums[end] + nums[start] > target)
            end--;

        // Add all possible subsequences that can be generated by the found range to the count.
        count += pows2[end - start + 1];

        // Find the first value that causes all subsequences in the range to not meet the target.
        while (start <= end && nums[end] + nums[start] <= target)
            start++;

        // Substract all posible subsequences that can be generated in this invalid range.
        count -= pows2[end - start + 1];

        if (count < 0)
            count += MOD;

        count %= MOD;
    }

    return count;
}

int main() {
    std::vector<int> nums{18,9,6,16,18,4,16,12,9,10,11,16,5,17,19,5,7,14,14,20,12,10,16,20,12,14,15,12,9,17,6,14,20,12,13,10,20,18,16,4,14,13,4,4,7,16,8};
    std::cout << numSubseq(nums, 24) << '\n';
    /*
    std::vector<int> nums{5, 2, 4, 1, 7, 6, 8}; 16)
    [9,25,9,28,24,12,17,8,28,7,21,25,10,2,16,19,12,13,15,28,14,12,24,9,6,7,2,15,19,13,30,30,23,19,11,3,17,2,14,20,22,30,12,1,11,2,2,20,20,27,15,9,10,4,12,30,13,5,2,11,29,5,3,13,22,5,16,19,7,19,11,16,11,25,29,21,29,3,2,9,20,15,9]
    16

    [14,4,6,6,20,8,5,6,8,12,6,10,14,9,17,16,9,7,14,11,14,15,13,11,10,18,13,17,17,14,17,7,9,5,10,13,8,5,18,20,7,5,5,15,19,14]
    22

    [1]
    1

    [2,3,3,4,6,7]
    12

    [3,3,6,8]
    10

    */
}